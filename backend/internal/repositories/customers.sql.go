// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: customers.sql

package repositories

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
    last_name,
    first_name,
    username,
    email
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, last_name, first_name, username, email, created_at, updated_at, deleted_at
`

type CreateCustomerParams struct {
	LastName  string
	FirstName string
	Username  string
	Email     pgtype.Text
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.LastName,
		arg.FirstName,
		arg.Username,
		arg.Email,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LastName,
		&i.FirstName,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
SELECT id, last_name, first_name, username, email, created_at, updated_at, deleted_at FROM customers
WHERE email = $1 AND deleted_at IS NULL
`

func (q *Queries) GetCustomerByEmail(ctx context.Context, email pgtype.Text) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByEmail, email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LastName,
		&i.FirstName,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT id, last_name, first_name, username, email, created_at, updated_at, deleted_at FROM customers
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetCustomerByID(ctx context.Context, id pgtype.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByID, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LastName,
		&i.FirstName,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCustomerByUsername = `-- name: GetCustomerByUsername :one
SELECT id, last_name, first_name, username, email, created_at, updated_at, deleted_at FROM customers
WHERE username = $1 AND deleted_at IS NULL
`

func (q *Queries) GetCustomerByUsername(ctx context.Context, username string) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByUsername, username)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LastName,
		&i.FirstName,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAllCustomers = `-- name: ListAllCustomers :many
SELECT id, last_name, first_name, username, email, created_at, updated_at, deleted_at FROM customers
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListAllCustomersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAllCustomers(ctx context.Context, arg ListAllCustomersParams) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listAllCustomers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.LastName,
			&i.FirstName,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreCustomer = `-- name: RestoreCustomer :one
UPDATE customers
SET deleted_at = NULL
WHERE id = $1
RETURNING id, last_name, first_name, username, email, created_at, updated_at, deleted_at
`

func (q *Queries) RestoreCustomer(ctx context.Context, id pgtype.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, restoreCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LastName,
		&i.FirstName,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const softDeleteCustomer = `-- name: SoftDeleteCustomer :exec
UPDATE customers
SET deleted_at = timezone('UTC', now())
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteCustomer(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteCustomer, id)
	return err
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
SET
    last_name = COALESCE($2, last_name),
    first_name = COALESCE($3, first_name),
    username = COALESCE($4, username),
    email = COALESCE($5, email),
    updated_at = timezone('UTC', now())
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, last_name, first_name, username, email, created_at, updated_at, deleted_at
`

type UpdateCustomerParams struct {
	ID        pgtype.UUID
	LastName  string
	FirstName string
	Username  string
	Email     pgtype.Text
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomer,
		arg.ID,
		arg.LastName,
		arg.FirstName,
		arg.Username,
		arg.Email,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.LastName,
		&i.FirstName,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
