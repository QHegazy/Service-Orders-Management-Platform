// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tenants.sql

package repositories

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const activateTenant = `-- name: ActivateTenant :one
UPDATE tenant.tenants
SET is_active = TRUE,
    updated_at = timezone('UTC', now())
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, tenant_name, domain, email, is_active, created_at, updated_at, deleted_at
`

func (q *Queries) ActivateTenant(ctx context.Context, id pgtype.UUID) (TenantTenant, error) {
	row := q.db.QueryRow(ctx, activateTenant, id)
	var i TenantTenant
	err := row.Scan(
		&i.ID,
		&i.TenantName,
		&i.Domain,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const addUserToTenant = `-- name: AddUserToTenant :exec
INSERT INTO tenant.tenant_users (tenant_id, user_id)
VALUES ($1, $2)
`

type AddUserToTenantParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	UserID   pgtype.UUID `json:"user_id"`
}

func (q *Queries) AddUserToTenant(ctx context.Context, arg AddUserToTenantParams) error {
	_, err := q.db.Exec(ctx, addUserToTenant, arg.TenantID, arg.UserID)
	return err
}

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenant.tenants (
    tenant_name,
    domain,
    email
) VALUES (
    $1, $2, $3
)
RETURNING id
`

type CreateTenantParams struct {
	TenantName string `json:"tenant_name"`
	Domain     string `json:"domain"`
	Email      string `json:"email"`
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createTenant, arg.TenantName, arg.Domain, arg.Email)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const deactivateTenant = `-- name: DeactivateTenant :one
UPDATE tenant.tenants
SET is_active = FALSE,
    updated_at = timezone('UTC', now())
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, tenant_name, domain, email, is_active, created_at, updated_at, deleted_at
`

func (q *Queries) DeactivateTenant(ctx context.Context, id pgtype.UUID) (TenantTenant, error) {
	row := q.db.QueryRow(ctx, deactivateTenant, id)
	var i TenantTenant
	err := row.Scan(
		&i.ID,
		&i.TenantName,
		&i.Domain,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteTenant = `-- name: DeleteTenant :exec
DELETE FROM tenant.tenants
WHERE id = $1
`

func (q *Queries) DeleteTenant(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTenant, id)
	return err
}

const getTechnicianIDsFromTenantID = `-- name: GetTechnicianIDsFromTenantID :many
SELECT
    u.id
FROM
    public.users AS u
JOIN
    tenant.tenant_users AS tu ON u.id = tu.user_id
WHERE
    tu.tenant_id = $1 AND u.role = 'Technician'
`

func (q *Queries) GetTechnicianIDsFromTenantID(ctx context.Context, tenantID pgtype.UUID) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, getTechnicianIDsFromTenantID, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.UUID{}
	for rows.Next() {
		var id pgtype.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTenantByDomain = `-- name: GetTenantByDomain :one
SELECT id, tenant_name, domain, email, is_active, created_at, updated_at, deleted_at FROM tenant.tenants
WHERE domain = $1 AND deleted_at IS NULL
`

func (q *Queries) GetTenantByDomain(ctx context.Context, domain string) (TenantTenant, error) {
	row := q.db.QueryRow(ctx, getTenantByDomain, domain)
	var i TenantTenant
	err := row.Scan(
		&i.ID,
		&i.TenantName,
		&i.Domain,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTenantByID = `-- name: GetTenantByID :one
SELECT id, tenant_name, domain, email, is_active, created_at, updated_at, deleted_at FROM tenant.tenants
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetTenantByID(ctx context.Context, id pgtype.UUID) (TenantTenant, error) {
	row := q.db.QueryRow(ctx, getTenantByID, id)
	var i TenantTenant
	err := row.Scan(
		&i.ID,
		&i.TenantName,
		&i.Domain,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTenantByName = `-- name: GetTenantByName :one
SELECT id, tenant_name, domain, email, is_active, created_at, updated_at, deleted_at FROM tenant.tenants
WHERE tenant_name = $1 AND deleted_at IS NULL
`

func (q *Queries) GetTenantByName(ctx context.Context, tenantName string) (TenantTenant, error) {
	row := q.db.QueryRow(ctx, getTenantByName, tenantName)
	var i TenantTenant
	err := row.Scan(
		&i.ID,
		&i.TenantName,
		&i.Domain,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTenantsByUserID = `-- name: GetTenantsByUserID :many
SELECT
    t.id,
    t.tenant_name,
    t.domain,
    t.email,
    t.is_active,
    t.created_at,
    t.updated_at,
    t.deleted_at
FROM
    tenant.tenants AS t
JOIN
    tenant.tenant_users AS tu ON t.id = tu.tenant_id
WHERE
    tu.user_id = $1
ORDER BY
    t.created_at DESC
LIMIT $2 OFFSET $3
`

type GetTenantsByUserIDParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) GetTenantsByUserID(ctx context.Context, arg GetTenantsByUserIDParams) ([]TenantTenant, error) {
	rows, err := q.db.Query(ctx, getTenantsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TenantTenant{}
	for rows.Next() {
		var i TenantTenant
		if err := rows.Scan(
			&i.ID,
			&i.TenantName,
			&i.Domain,
			&i.Email,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTenantsByUserId = `-- name: GetTenantsByUserId :many
SELECT
    t.id,
    t.tenant_name,
    t.domain,
    t.email,
    t.is_active,
    t.created_at,
    t.updated_at,
    t.deleted_at
FROM
    tenant.tenants AS t
JOIN
    tenant.tenant_users AS tu ON t.id = tu.tenant_id
WHERE
    tu.user_id = $1
ORDER BY
    t.created_at DESC
`

func (q *Queries) GetTenantsByUserId(ctx context.Context, userID pgtype.UUID) ([]TenantTenant, error) {
	rows, err := q.db.Query(ctx, getTenantsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TenantTenant{}
	for rows.Next() {
		var i TenantTenant
		if err := rows.Scan(
			&i.ID,
			&i.TenantName,
			&i.Domain,
			&i.Email,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllTenants = `-- name: ListAllTenants :many
SELECT id, tenant_name, domain, email, is_active, created_at, updated_at, deleted_at FROM tenant.tenants
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListAllTenantsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAllTenants(ctx context.Context, arg ListAllTenantsParams) ([]TenantTenant, error) {
	rows, err := q.db.Query(ctx, listAllTenants, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TenantTenant{}
	for rows.Next() {
		var i TenantTenant
		if err := rows.Scan(
			&i.ID,
			&i.TenantName,
			&i.Domain,
			&i.Email,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTenants = `-- name: ListTenants :many
SELECT id, tenant_name, domain, email, is_active, created_at, updated_at, deleted_at FROM tenant.tenants
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListTenantsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTenants(ctx context.Context, arg ListTenantsParams) ([]TenantTenant, error) {
	rows, err := q.db.Query(ctx, listTenants, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TenantTenant{}
	for rows.Next() {
		var i TenantTenant
		if err := rows.Scan(
			&i.ID,
			&i.TenantName,
			&i.Domain,
			&i.Email,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersForTenant = `-- name: ListUsersForTenant :many
SELECT
    u.id,
    u.username,
    u.email,
    u.role,
    u.is_active,
    u.is_verified,
    u.created_at,
    u.updated_at,
    u.deleted_at
FROM
    users AS u
JOIN
    tenant.tenant_users AS tu ON u.id = tu.user_id
WHERE
    tu.tenant_id = $1
ORDER BY
    u.created_at DESC
LIMIT $2 OFFSET $3
`

type ListUsersForTenantParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

type ListUsersForTenantRow struct {
	ID         pgtype.UUID        `json:"id"`
	Username   string             `json:"username"`
	Email      string             `json:"email"`
	Role       UserRole           `json:"role"`
	IsActive   pgtype.Bool        `json:"is_active"`
	IsVerified pgtype.Bool        `json:"is_verified"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
	DeletedAt  pgtype.Timestamptz `json:"deleted_at"`
}

func (q *Queries) ListUsersForTenant(ctx context.Context, arg ListUsersForTenantParams) ([]ListUsersForTenantRow, error) {
	rows, err := q.db.Query(ctx, listUsersForTenant, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersForTenantRow{}
	for rows.Next() {
		var i ListUsersForTenantRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Role,
			&i.IsActive,
			&i.IsVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserFromTenant = `-- name: RemoveUserFromTenant :exec
DELETE FROM tenant.tenant_users
WHERE tenant_id = $1 AND user_id = $2
`

type RemoveUserFromTenantParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	UserID   pgtype.UUID `json:"user_id"`
}

func (q *Queries) RemoveUserFromTenant(ctx context.Context, arg RemoveUserFromTenantParams) error {
	_, err := q.db.Exec(ctx, removeUserFromTenant, arg.TenantID, arg.UserID)
	return err
}

const restoreTenant = `-- name: RestoreTenant :one
UPDATE tenant.tenants
SET deleted_at = NULL
WHERE id = $1
RETURNING id, tenant_name, domain, email, is_active, created_at, updated_at, deleted_at
`

func (q *Queries) RestoreTenant(ctx context.Context, id pgtype.UUID) (TenantTenant, error) {
	row := q.db.QueryRow(ctx, restoreTenant, id)
	var i TenantTenant
	err := row.Scan(
		&i.ID,
		&i.TenantName,
		&i.Domain,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const softDeleteTenant = `-- name: SoftDeleteTenant :exec
UPDATE tenant.tenants
SET deleted_at = timezone('UTC', now())
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteTenant(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteTenant, id)
	return err
}

const updateTenant = `-- name: UpdateTenant :one
UPDATE tenant.tenants
SET
    tenant_name = COALESCE($2, tenant_name),
    domain = COALESCE($3, domain),
    is_active = COALESCE($4, is_active),
    email = COALESCE($5, email),
    updated_at = timezone('UTC', now())
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, tenant_name, domain, email, is_active, created_at, updated_at, deleted_at
`

type UpdateTenantParams struct {
	ID         pgtype.UUID `json:"id"`
	TenantName string      `json:"tenant_name"`
	Domain     string      `json:"domain"`
	IsActive   pgtype.Bool `json:"is_active"`
	Email      string      `json:"email"`
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) (TenantTenant, error) {
	row := q.db.QueryRow(ctx, updateTenant,
		arg.ID,
		arg.TenantName,
		arg.Domain,
		arg.IsActive,
		arg.Email,
	)
	var i TenantTenant
	err := row.Scan(
		&i.ID,
		&i.TenantName,
		&i.Domain,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
