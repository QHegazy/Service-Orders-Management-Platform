// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tenants.sql

package repositories

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const activateTenant = `-- name: ActivateTenant :one
UPDATE tenant.tenants
SET is_active = TRUE,
    updated_at = timezone('UTC', now())
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, tenant_name, domain, logo_url, is_active, created_at, updated_at, deleted_at
`

func (q *Queries) ActivateTenant(ctx context.Context, id pgtype.UUID) (TenantTenant, error) {
	row := q.db.QueryRow(ctx, activateTenant, id)
	var i TenantTenant
	err := row.Scan(
		&i.ID,
		&i.TenantName,
		&i.Domain,
		&i.LogoUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenant.tenants (
    tenant_name,
    domain,
    logo_url
) VALUES (
    $1, $2, $3
)
RETURNING id, tenant_name, domain, logo_url, is_active, created_at, updated_at, deleted_at
`

type CreateTenantParams struct {
	TenantName string
	Domain     string
	LogoUrl    pgtype.Text
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (TenantTenant, error) {
	row := q.db.QueryRow(ctx, createTenant, arg.TenantName, arg.Domain, arg.LogoUrl)
	var i TenantTenant
	err := row.Scan(
		&i.ID,
		&i.TenantName,
		&i.Domain,
		&i.LogoUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deactivateTenant = `-- name: DeactivateTenant :one
UPDATE tenant.tenants
SET is_active = FALSE,
    updated_at = timezone('UTC', now())
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, tenant_name, domain, logo_url, is_active, created_at, updated_at, deleted_at
`

func (q *Queries) DeactivateTenant(ctx context.Context, id pgtype.UUID) (TenantTenant, error) {
	row := q.db.QueryRow(ctx, deactivateTenant, id)
	var i TenantTenant
	err := row.Scan(
		&i.ID,
		&i.TenantName,
		&i.Domain,
		&i.LogoUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteTenant = `-- name: DeleteTenant :exec
DELETE FROM tenant.tenants
WHERE id = $1
`

func (q *Queries) DeleteTenant(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTenant, id)
	return err
}

const getTenantByDomain = `-- name: GetTenantByDomain :one
SELECT id, tenant_name, domain, logo_url, is_active, created_at, updated_at, deleted_at FROM tenant.tenants
WHERE domain = $1 AND deleted_at IS NULL
`

func (q *Queries) GetTenantByDomain(ctx context.Context, domain string) (TenantTenant, error) {
	row := q.db.QueryRow(ctx, getTenantByDomain, domain)
	var i TenantTenant
	err := row.Scan(
		&i.ID,
		&i.TenantName,
		&i.Domain,
		&i.LogoUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTenantByID = `-- name: GetTenantByID :one
SELECT id, tenant_name, domain, logo_url, is_active, created_at, updated_at, deleted_at FROM tenant.tenants
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetTenantByID(ctx context.Context, id pgtype.UUID) (TenantTenant, error) {
	row := q.db.QueryRow(ctx, getTenantByID, id)
	var i TenantTenant
	err := row.Scan(
		&i.ID,
		&i.TenantName,
		&i.Domain,
		&i.LogoUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTenantByName = `-- name: GetTenantByName :one
SELECT id, tenant_name, domain, logo_url, is_active, created_at, updated_at, deleted_at FROM tenant.tenants
WHERE tenant_name = $1 AND deleted_at IS NULL
`

func (q *Queries) GetTenantByName(ctx context.Context, tenantName string) (TenantTenant, error) {
	row := q.db.QueryRow(ctx, getTenantByName, tenantName)
	var i TenantTenant
	err := row.Scan(
		&i.ID,
		&i.TenantName,
		&i.Domain,
		&i.LogoUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAllTenants = `-- name: ListAllTenants :many
SELECT id, tenant_name, domain, logo_url, is_active, created_at, updated_at, deleted_at FROM tenant.tenants
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListAllTenantsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAllTenants(ctx context.Context, arg ListAllTenantsParams) ([]TenantTenant, error) {
	rows, err := q.db.Query(ctx, listAllTenants, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TenantTenant
	for rows.Next() {
		var i TenantTenant
		if err := rows.Scan(
			&i.ID,
			&i.TenantName,
			&i.Domain,
			&i.LogoUrl,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTenants = `-- name: ListTenants :many
SELECT id, tenant_name, domain, logo_url, is_active, created_at, updated_at, deleted_at FROM tenant.tenants
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListTenantsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListTenants(ctx context.Context, arg ListTenantsParams) ([]TenantTenant, error) {
	rows, err := q.db.Query(ctx, listTenants, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TenantTenant
	for rows.Next() {
		var i TenantTenant
		if err := rows.Scan(
			&i.ID,
			&i.TenantName,
			&i.Domain,
			&i.LogoUrl,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreTenant = `-- name: RestoreTenant :one
UPDATE tenant.tenants
SET deleted_at = NULL
WHERE id = $1
RETURNING id, tenant_name, domain, logo_url, is_active, created_at, updated_at, deleted_at
`

func (q *Queries) RestoreTenant(ctx context.Context, id pgtype.UUID) (TenantTenant, error) {
	row := q.db.QueryRow(ctx, restoreTenant, id)
	var i TenantTenant
	err := row.Scan(
		&i.ID,
		&i.TenantName,
		&i.Domain,
		&i.LogoUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const softDeleteTenant = `-- name: SoftDeleteTenant :exec
UPDATE tenant.tenants
SET deleted_at = timezone('UTC', now())
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteTenant(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteTenant, id)
	return err
}

const updateTenant = `-- name: UpdateTenant :one
UPDATE tenant.tenants
SET
    tenant_name = COALESCE($2, tenant_name),
    domain = COALESCE($3, domain),
    logo_url = COALESCE($4, logo_url),
    is_active = COALESCE($5, is_active),
    updated_at = timezone('UTC', now())
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, tenant_name, domain, logo_url, is_active, created_at, updated_at, deleted_at
`

type UpdateTenantParams struct {
	ID         pgtype.UUID
	TenantName string
	Domain     string
	LogoUrl    pgtype.Text
	IsActive   pgtype.Bool
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) (TenantTenant, error) {
	row := q.db.QueryRow(ctx, updateTenant,
		arg.ID,
		arg.TenantName,
		arg.Domain,
		arg.LogoUrl,
		arg.IsActive,
	)
	var i TenantTenant
	err := row.Scan(
		&i.ID,
		&i.TenantName,
		&i.Domain,
		&i.LogoUrl,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
