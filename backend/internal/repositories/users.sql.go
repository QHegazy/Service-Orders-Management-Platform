// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package repositories

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const activateUser = `-- name: ActivateUser :one
UPDATE users
SET is_active  = TRUE,
    updated_at = timezone('UTC', now())
WHERE id = $1
  AND deleted_at IS NULL
RETURNING id, username, email, tenant_id, password, role, is_active, is_verified, created_at, updated_at, deleted_at
`

func (q *Queries) ActivateUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, activateUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.TenantID,
		&i.Password,
		&i.Role,
		&i.IsActive,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const changeUserPassword = `-- name: ChangeUserPassword :one
UPDATE users
SET password   = $2,
    updated_at = timezone('UTC', now())
WHERE id = $1
  AND deleted_at IS NULL
RETURNING id, username, email, tenant_id, password, role, is_active, is_verified, created_at, updated_at, deleted_at
`

type ChangeUserPasswordParams struct {
	ID       pgtype.UUID
	Password string
}

func (q *Queries) ChangeUserPassword(ctx context.Context, arg ChangeUserPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, changeUserPassword, arg.ID, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.TenantID,
		&i.Password,
		&i.Role,
		&i.IsActive,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
WHERE tenant_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) CountUsers(ctx context.Context, tenantID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers, tenantID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUsersByRole = `-- name: CountUsersByRole :one
SELECT COUNT(*) FROM users
WHERE tenant_id = $1
  AND role = $2
  AND deleted_at IS NULL
`

type CountUsersByRoleParams struct {
	TenantID pgtype.UUID
	Role     UserRole
}

func (q *Queries) CountUsersByRole(ctx context.Context, arg CountUsersByRoleParams) (int64, error) {
	row := q.db.QueryRow(ctx, countUsersByRole, arg.TenantID, arg.Role)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, tenant_id, password, role)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, username, email, tenant_id, password, role, is_active, is_verified, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Username string
	Email    string
	TenantID pgtype.UUID
	Password string
	Role     UserRole
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.TenantID,
		arg.Password,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.TenantID,
		&i.Password,
		&i.Role,
		&i.IsActive,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deactivateUser = `-- name: DeactivateUser :one
UPDATE users
SET is_active  = FALSE,
    updated_at = timezone('UTC', now())
WHERE id = $1
  AND deleted_at IS NULL
RETURNING id, username, email, tenant_id, password, role, is_active, is_verified, created_at, updated_at, deleted_at
`

func (q *Queries) DeactivateUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, deactivateUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.TenantID,
		&i.Password,
		&i.Role,
		&i.IsActive,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, tenant_id, password, role, is_active, is_verified, created_at, updated_at, deleted_at FROM users
WHERE id = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.TenantID,
		&i.Password,
		&i.Role,
		&i.IsActive,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, tenant_id, password, role, is_active, is_verified, created_at, updated_at, deleted_at FROM users
WHERE username = $1
  AND deleted_at IS NULL
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.TenantID,
		&i.Password,
		&i.Role,
		&i.IsActive,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAllUsers = `-- name: ListAllUsers :many
SELECT id, username, email, tenant_id, password, role, is_active, is_verified, created_at, updated_at, deleted_at FROM users
WHERE tenant_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListAllUsersParams struct {
	TenantID pgtype.UUID
	Limit    int32
	Offset   int32
}

func (q *Queries) ListAllUsers(ctx context.Context, arg ListAllUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listAllUsers, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.TenantID,
			&i.Password,
			&i.Role,
			&i.IsActive,
			&i.IsVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllUsersByRole = `-- name: ListAllUsersByRole :many
SELECT id, username, email, tenant_id, password, role, is_active, is_verified, created_at, updated_at, deleted_at FROM users
WHERE tenant_id = $1
  AND role = $2
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListAllUsersByRoleParams struct {
	TenantID pgtype.UUID
	Role     UserRole
	Limit    int32
	Offset   int32
}

func (q *Queries) ListAllUsersByRole(ctx context.Context, arg ListAllUsersByRoleParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listAllUsersByRole,
		arg.TenantID,
		arg.Role,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.TenantID,
			&i.Password,
			&i.Role,
			&i.IsActive,
			&i.IsVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, tenant_id, password, role, is_active, is_verified, created_at, updated_at, deleted_at FROM users
WHERE tenant_id = $1
  AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListUsersParams struct {
	TenantID pgtype.UUID
	Limit    int32
	Offset   int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.TenantID,
			&i.Password,
			&i.Role,
			&i.IsActive,
			&i.IsVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByRole = `-- name: ListUsersByRole :many
SELECT id, username, email, tenant_id, password, role, is_active, is_verified, created_at, updated_at, deleted_at FROM users
WHERE tenant_id = $1
  AND role = $2
  AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListUsersByRoleParams struct {
	TenantID pgtype.UUID
	Role     UserRole
	Limit    int32
	Offset   int32
}

func (q *Queries) ListUsersByRole(ctx context.Context, arg ListUsersByRoleParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsersByRole,
		arg.TenantID,
		arg.Role,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.TenantID,
			&i.Password,
			&i.Role,
			&i.IsActive,
			&i.IsVerified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users
SET deleted_at = timezone('UTC', now())
WHERE id = $1
  AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteUser, id)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
    username    = COALESCE($2, username),
    email       = COALESCE($3, email),
    password    = COALESCE($4, password),
    role        = COALESCE($5, role),
    is_active   = COALESCE($6, is_active),
    is_verified = COALESCE($7, is_verified),
    updated_at  = timezone('UTC', now())
WHERE id = $1
  AND deleted_at IS NULL
RETURNING id, username, email, tenant_id, password, role, is_active, is_verified, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID         pgtype.UUID
	Username   string
	Email      string
	Password   string
	Role       UserRole
	IsActive   pgtype.Bool
	IsVerified pgtype.Bool
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Role,
		arg.IsActive,
		arg.IsVerified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.TenantID,
		&i.Password,
		&i.Role,
		&i.IsActive,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const verifyUser = `-- name: VerifyUser :one
UPDATE users
SET is_verified = TRUE,
    updated_at  = timezone('UTC', now())
WHERE id = $1
  AND deleted_at IS NULL
RETURNING id, username, email, tenant_id, password, role, is_active, is_verified, created_at, updated_at, deleted_at
`

func (q *Queries) VerifyUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, verifyUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.TenantID,
		&i.Password,
		&i.Role,
		&i.IsActive,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
