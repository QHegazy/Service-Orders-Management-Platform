// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tickets.sql

package repositories

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createComment = `-- name: CreateComment :one
INSERT INTO ticket.comments (
    ticket_id,
    comment
) VALUES (
    $1, $2
)
RETURNING id, ticket_id, comment, created_at, updated_at
`

type CreateCommentParams struct {
	TicketID pgtype.UUID
	Comment  string
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (TicketComment, error) {
	row := q.db.QueryRow(ctx, createComment, arg.TicketID, arg.Comment)
	var i TicketComment
	err := row.Scan(
		&i.ID,
		&i.TicketID,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTicket = `-- name: CreateTicket :one
INSERT INTO ticket.tickets (
    tenant_id,
    customer_id,
    assigned_to,
    title,
    description,
    status,
    priority
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, tenant_id, customer_id, assigned_to, title, description, status, priority, created_at, updated_at, closed_at
`

type CreateTicketParams struct {
	TenantID    pgtype.UUID
	CustomerID  pgtype.UUID
	AssignedTo  pgtype.UUID
	Title       string
	Description pgtype.Text
	Status      NullTicketTicketStatus
	Priority    NullTicketTicketPriority
}

func (q *Queries) CreateTicket(ctx context.Context, arg CreateTicketParams) (TicketTicket, error) {
	row := q.db.QueryRow(ctx, createTicket,
		arg.TenantID,
		arg.CustomerID,
		arg.AssignedTo,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.Priority,
	)
	var i TicketTicket
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.CustomerID,
		&i.AssignedTo,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}

const deleteTicket = `-- name: DeleteTicket :exec
DELETE FROM ticket.tickets
WHERE id = $1
`

func (q *Queries) DeleteTicket(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTicket, id)
	return err
}

const getTicketByID = `-- name: GetTicketByID :one
SELECT id, tenant_id, customer_id, assigned_to, title, description, status, priority, created_at, updated_at, closed_at FROM ticket.tickets
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetTicketByID(ctx context.Context, id pgtype.UUID) (TicketTicket, error) {
	row := q.db.QueryRow(ctx, getTicketByID, id)
	var i TicketTicket
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.CustomerID,
		&i.AssignedTo,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}

const listCommentsByTicketID = `-- name: ListCommentsByTicketID :many
SELECT id, ticket_id, comment, created_at, updated_at FROM ticket.comments
WHERE ticket_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListCommentsByTicketIDParams struct {
	TicketID pgtype.UUID
	Limit    int32
	Offset   int32
}

func (q *Queries) ListCommentsByTicketID(ctx context.Context, arg ListCommentsByTicketIDParams) ([]TicketComment, error) {
	rows, err := q.db.Query(ctx, listCommentsByTicketID, arg.TicketID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketComment
	for rows.Next() {
		var i TicketComment
		if err := rows.Scan(
			&i.ID,
			&i.TicketID,
			&i.Comment,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketsByAssignedTo = `-- name: ListTicketsByAssignedTo :many
SELECT id, tenant_id, customer_id, assigned_to, title, description, status, priority, created_at, updated_at, closed_at FROM ticket.tickets
WHERE assigned_to = $1 
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListTicketsByAssignedToParams struct {
	AssignedTo pgtype.UUID
	Limit      int32
	Offset     int32
}

func (q *Queries) ListTicketsByAssignedTo(ctx context.Context, arg ListTicketsByAssignedToParams) ([]TicketTicket, error) {
	rows, err := q.db.Query(ctx, listTicketsByAssignedTo, arg.AssignedTo, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketTicket
	for rows.Next() {
		var i TicketTicket
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.CustomerID,
			&i.AssignedTo,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketsByCustomerID = `-- name: ListTicketsByCustomerID :many
SELECT id, tenant_id, customer_id, assigned_to, title, description, status, priority, created_at, updated_at, closed_at FROM ticket.tickets
WHERE customer_id = $1 
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListTicketsByCustomerIDParams struct {
	CustomerID pgtype.UUID
	Limit      int32
	Offset     int32
}

func (q *Queries) ListTicketsByCustomerID(ctx context.Context, arg ListTicketsByCustomerIDParams) ([]TicketTicket, error) {
	rows, err := q.db.Query(ctx, listTicketsByCustomerID, arg.CustomerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketTicket
	for rows.Next() {
		var i TicketTicket
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.CustomerID,
			&i.AssignedTo,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketsByPriority = `-- name: ListTicketsByPriority :many
SELECT id, tenant_id, customer_id, assigned_to, title, description, status, priority, created_at, updated_at, closed_at FROM ticket.tickets
WHERE tenant_id = $1 AND priority = $2
ORDER BY created_at DESC
LIMIT $3
`

type ListTicketsByPriorityParams struct {
	TenantID pgtype.UUID
	Priority NullTicketTicketPriority
	Limit    int32
}

func (q *Queries) ListTicketsByPriority(ctx context.Context, arg ListTicketsByPriorityParams) ([]TicketTicket, error) {
	rows, err := q.db.Query(ctx, listTicketsByPriority, arg.TenantID, arg.Priority, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketTicket
	for rows.Next() {
		var i TicketTicket
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.CustomerID,
			&i.AssignedTo,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketsByStatus = `-- name: ListTicketsByStatus :many
SELECT id, tenant_id, customer_id, assigned_to, title, description, status, priority, created_at, updated_at, closed_at FROM ticket.tickets
WHERE tenant_id = $1 AND status = $2 
ORDER BY created_at DESC
LIMIT $3
`

type ListTicketsByStatusParams struct {
	TenantID pgtype.UUID
	Status   NullTicketTicketStatus
	Limit    int32
}

func (q *Queries) ListTicketsByStatus(ctx context.Context, arg ListTicketsByStatusParams) ([]TicketTicket, error) {
	rows, err := q.db.Query(ctx, listTicketsByStatus, arg.TenantID, arg.Status, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketTicket
	for rows.Next() {
		var i TicketTicket
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.CustomerID,
			&i.AssignedTo,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketsByTenantID = `-- name: ListTicketsByTenantID :many
SELECT id, tenant_id, customer_id, assigned_to, title, description, status, priority, created_at, updated_at, closed_at FROM ticket.tickets
WHERE tenant_id = $1 
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListTicketsByTenantIDParams struct {
	TenantID pgtype.UUID
	Limit    int32
	Offset   int32
}

func (q *Queries) ListTicketsByTenantID(ctx context.Context, arg ListTicketsByTenantIDParams) ([]TicketTicket, error) {
	rows, err := q.db.Query(ctx, listTicketsByTenantID, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketTicket
	for rows.Next() {
		var i TicketTicket
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.CustomerID,
			&i.AssignedTo,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketsByTenantIDAndStatus = `-- name: ListTicketsByTenantIDAndStatus :many
SELECT id, tenant_id, customer_id, assigned_to, title, description, status, priority, created_at, updated_at, closed_at FROM ticket.tickets
WHERE tenant_id = $1 AND status = $2
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListTicketsByTenantIDAndStatusParams struct {
	TenantID pgtype.UUID
	Status   NullTicketTicketStatus
	Limit    int32
	Offset   int32
}

func (q *Queries) ListTicketsByTenantIDAndStatus(ctx context.Context, arg ListTicketsByTenantIDAndStatusParams) ([]TicketTicket, error) {
	rows, err := q.db.Query(ctx, listTicketsByTenantIDAndStatus,
		arg.TenantID,
		arg.Status,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketTicket
	for rows.Next() {
		var i TicketTicket
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.CustomerID,
			&i.AssignedTo,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTicket = `-- name: UpdateTicket :one
UPDATE ticket.tickets
SET
    assigned_to = COALESCE($2, assigned_to),
    title = COALESCE($3, title),
    description = COALESCE($4, description),
    status = COALESCE($5, status),
    priority = COALESCE($6, priority),
    updated_at = timezone('UTC', now()),
    closed_at = CASE WHEN $5 = 'RESOLVED' OR $5 = 'CLOSED' THEN timezone('UTC', now()) ELSE closed_at END
WHERE id = $1 
RETURNING id, tenant_id, customer_id, assigned_to, title, description, status, priority, created_at, updated_at, closed_at
`

type UpdateTicketParams struct {
	ID          pgtype.UUID
	AssignedTo  pgtype.UUID
	Title       string
	Description pgtype.Text
	Status      NullTicketTicketStatus
	Priority    NullTicketTicketPriority
}

func (q *Queries) UpdateTicket(ctx context.Context, arg UpdateTicketParams) (TicketTicket, error) {
	row := q.db.QueryRow(ctx, updateTicket,
		arg.ID,
		arg.AssignedTo,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.Priority,
	)
	var i TicketTicket
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.CustomerID,
		&i.AssignedTo,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}
