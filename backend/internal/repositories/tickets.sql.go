// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tickets.sql

package repositories

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createComment = `-- name: CreateComment :one
INSERT INTO ticket.comments (
    ticket_id,
    author_type,
    author_id,
    comment
) VALUES (
    $1, $2, $3, $4
)
RETURNING id
`

type CreateCommentParams struct {
	TicketID   pgtype.UUID `json:"ticket_id"`
	AuthorType string      `json:"author_type"`
	AuthorID   pgtype.UUID `json:"author_id"`
	Comment    string      `json:"comment"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createComment,
		arg.TicketID,
		arg.AuthorType,
		arg.AuthorID,
		arg.Comment,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const createTicket = `-- name: CreateTicket :one
INSERT INTO ticket.tickets (
    tenant_id,
    customer_id,
    assigned_to,
    title,
    description,
    status,
    priority
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id
`

type CreateTicketParams struct {
	TenantID    pgtype.UUID `json:"tenant_id"`
	CustomerID  pgtype.UUID `json:"customer_id"`
	AssignedTo  pgtype.UUID `json:"assigned_to"`
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	Status      string      `json:"status"`
	Priority    string      `json:"priority"`
}

func (q *Queries) CreateTicket(ctx context.Context, arg CreateTicketParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createTicket,
		arg.TenantID,
		arg.CustomerID,
		arg.AssignedTo,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.Priority,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteTicket = `-- name: DeleteTicket :exec
DELETE FROM ticket.tickets
WHERE id = $1
`

func (q *Queries) DeleteTicket(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTicket, id)
	return err
}

const getTicketByID = `-- name: GetTicketByID :one
SELECT id, tenant_id, customer_id, assigned_to, title, description, status, priority, created_at, updated_at, closed_at FROM ticket.tickets
WHERE id = $1
`

func (q *Queries) GetTicketByID(ctx context.Context, id pgtype.UUID) (TicketTicket, error) {
	row := q.db.QueryRow(ctx, getTicketByID, id)
	var i TicketTicket
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.CustomerID,
		&i.AssignedTo,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}

const listCommentsByTicketID = `-- name: ListCommentsByTicketID :many
SELECT 
    c.id, c.ticket_id, c.author_type, c.author_id, c.comment, c.created_at,
    u.username
FROM ticket.comments c
LEFT JOIN users u ON c.user_id = u.id
WHERE c.ticket_id = $1
ORDER BY c.created_at DESC
LIMIT $2 OFFSET $3
`

type ListCommentsByTicketIDParams struct {
	TicketID pgtype.UUID `json:"ticket_id"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

type ListCommentsByTicketIDRow struct {
	ID         pgtype.UUID        `json:"id"`
	TicketID   pgtype.UUID        `json:"ticket_id"`
	AuthorType string             `json:"author_type"`
	AuthorID   pgtype.UUID        `json:"author_id"`
	Comment    string             `json:"comment"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	Username   pgtype.Text        `json:"username"`
}

func (q *Queries) ListCommentsByTicketID(ctx context.Context, arg ListCommentsByTicketIDParams) ([]ListCommentsByTicketIDRow, error) {
	rows, err := q.db.Query(ctx, listCommentsByTicketID, arg.TicketID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCommentsByTicketIDRow{}
	for rows.Next() {
		var i ListCommentsByTicketIDRow
		if err := rows.Scan(
			&i.ID,
			&i.TicketID,
			&i.AuthorType,
			&i.AuthorID,
			&i.Comment,
			&i.CreatedAt,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketsByAssignedTo = `-- name: ListTicketsByAssignedTo :many
SELECT id, tenant_id, customer_id, assigned_to, title, description, status, priority, created_at, updated_at, closed_at FROM ticket.tickets
WHERE assigned_to = $1 
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListTicketsByAssignedToParams struct {
	AssignedTo pgtype.UUID `json:"assigned_to"`
	Limit      int32       `json:"limit"`
	Offset     int32       `json:"offset"`
}

func (q *Queries) ListTicketsByAssignedTo(ctx context.Context, arg ListTicketsByAssignedToParams) ([]TicketTicket, error) {
	rows, err := q.db.Query(ctx, listTicketsByAssignedTo, arg.AssignedTo, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TicketTicket{}
	for rows.Next() {
		var i TicketTicket
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.CustomerID,
			&i.AssignedTo,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketsByCustomerID = `-- name: ListTicketsByCustomerID :many
SELECT 
    t.id,
    t.tenant_id,
    t.customer_id,
    t.created_at,
    t.closed_at,
    t.status,
    t.priority,
    u.username AS assigned_username
FROM ticket.tickets AS t
JOIN users AS u ON t.assigned_to = u.id
WHERE t.customer_id = $1
ORDER BY t.created_at DESC
LIMIT $2 OFFSET $3
`

type ListTicketsByCustomerIDParams struct {
	CustomerID pgtype.UUID `json:"customer_id"`
	Limit      int32       `json:"limit"`
	Offset     int32       `json:"offset"`
}

type ListTicketsByCustomerIDRow struct {
	ID               pgtype.UUID        `json:"id"`
	TenantID         pgtype.UUID        `json:"tenant_id"`
	CustomerID       pgtype.UUID        `json:"customer_id"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	ClosedAt         pgtype.Timestamptz `json:"closed_at"`
	Status           string             `json:"status"`
	Priority         string             `json:"priority"`
	AssignedUsername string             `json:"assigned_username"`
}

func (q *Queries) ListTicketsByCustomerID(ctx context.Context, arg ListTicketsByCustomerIDParams) ([]ListTicketsByCustomerIDRow, error) {
	rows, err := q.db.Query(ctx, listTicketsByCustomerID, arg.CustomerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTicketsByCustomerIDRow{}
	for rows.Next() {
		var i ListTicketsByCustomerIDRow
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.CustomerID,
			&i.CreatedAt,
			&i.ClosedAt,
			&i.Status,
			&i.Priority,
			&i.AssignedUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketsByCustomerId = `-- name: ListTicketsByCustomerId :many
SELECT
    t.id,
    t.tenant_id,
    t.customer_id,
    t.assigned_to,
    t.title,
    t.description,
    t.status,
    t.priority,
    t.created_at,
    t.updated_at,
    t.closed_at,
    c.username AS customer_username,
    u.username AS assigned_username
FROM
    ticket.tickets AS t
LEFT JOIN
    users AS u ON t.assigned_to = u.id
LEFT JOIN
    customers AS c ON t.customer_id = c.id
WHERE
    t.customer_id = $1
ORDER BY
    t.created_at DESC
LIMIT $2 OFFSET $3
`

type ListTicketsByCustomerIdParams struct {
	CustomerID pgtype.UUID `json:"customer_id"`
	Limit      int32       `json:"limit"`
	Offset     int32       `json:"offset"`
}

type ListTicketsByCustomerIdRow struct {
	ID               pgtype.UUID        `json:"id"`
	TenantID         pgtype.UUID        `json:"tenant_id"`
	CustomerID       pgtype.UUID        `json:"customer_id"`
	AssignedTo       pgtype.UUID        `json:"assigned_to"`
	Title            string             `json:"title"`
	Description      pgtype.Text        `json:"description"`
	Status           string             `json:"status"`
	Priority         string             `json:"priority"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
	ClosedAt         pgtype.Timestamptz `json:"closed_at"`
	CustomerUsername pgtype.Text        `json:"customer_username"`
	AssignedUsername pgtype.Text        `json:"assigned_username"`
}

func (q *Queries) ListTicketsByCustomerId(ctx context.Context, arg ListTicketsByCustomerIdParams) ([]ListTicketsByCustomerIdRow, error) {
	rows, err := q.db.Query(ctx, listTicketsByCustomerId, arg.CustomerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTicketsByCustomerIdRow{}
	for rows.Next() {
		var i ListTicketsByCustomerIdRow
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.CustomerID,
			&i.AssignedTo,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
			&i.CustomerUsername,
			&i.AssignedUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketsByPriority = `-- name: ListTicketsByPriority :many
SELECT id, tenant_id, customer_id, assigned_to, title, description, status, priority, created_at, updated_at, closed_at FROM ticket.tickets
WHERE tenant_id = $1 AND priority = $2
ORDER BY created_at DESC
LIMIT $3
`

type ListTicketsByPriorityParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	Priority string      `json:"priority"`
	Limit    int32       `json:"limit"`
}

func (q *Queries) ListTicketsByPriority(ctx context.Context, arg ListTicketsByPriorityParams) ([]TicketTicket, error) {
	rows, err := q.db.Query(ctx, listTicketsByPriority, arg.TenantID, arg.Priority, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TicketTicket{}
	for rows.Next() {
		var i TicketTicket
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.CustomerID,
			&i.AssignedTo,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketsByStatus = `-- name: ListTicketsByStatus :many
SELECT id, tenant_id, customer_id, assigned_to, title, description, status, priority, created_at, updated_at, closed_at FROM ticket.tickets
WHERE tenant_id = $1 AND status = $2 
ORDER BY created_at DESC
LIMIT $3
`

type ListTicketsByStatusParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	Status   string      `json:"status"`
	Limit    int32       `json:"limit"`
}

func (q *Queries) ListTicketsByStatus(ctx context.Context, arg ListTicketsByStatusParams) ([]TicketTicket, error) {
	rows, err := q.db.Query(ctx, listTicketsByStatus, arg.TenantID, arg.Status, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TicketTicket{}
	for rows.Next() {
		var i TicketTicket
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.CustomerID,
			&i.AssignedTo,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketsByTenantID = `-- name: ListTicketsByTenantID :many
SELECT id, tenant_id, customer_id, assigned_to, title, description, status, priority, created_at, updated_at, closed_at FROM ticket.tickets
WHERE tenant_id = $1 
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListTicketsByTenantIDParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

func (q *Queries) ListTicketsByTenantID(ctx context.Context, arg ListTicketsByTenantIDParams) ([]TicketTicket, error) {
	rows, err := q.db.Query(ctx, listTicketsByTenantID, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TicketTicket{}
	for rows.Next() {
		var i TicketTicket
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.CustomerID,
			&i.AssignedTo,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketsByUserId = `-- name: ListTicketsByUserId :many
SELECT
    t.id,
    t.tenant_id,
    t.customer_id,
    t.assigned_to,
    t.title,
    t.description,
    t.status,
    t.priority,
    t.created_at,
    t.updated_at,
    t.closed_at,
    c.first_name AS customer_first_name,
    c.last_name AS customer_last_name,
    u.username AS assigned_username
FROM
    ticket.tickets AS t
JOIN
    tenant.tenant_users AS tu ON t.tenant_id = tu.tenant_id
LEFT JOIN
    users AS u ON t.assigned_to = u.id
JOIN  
    customers AS c ON t.customer_id = c.id
WHERE
    tu.user_id = $1
ORDER BY
    t.created_at DESC
LIMIT $2 OFFSET $3
`

type ListTicketsByUserIdParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

type ListTicketsByUserIdRow struct {
	ID                pgtype.UUID        `json:"id"`
	TenantID          pgtype.UUID        `json:"tenant_id"`
	CustomerID        pgtype.UUID        `json:"customer_id"`
	AssignedTo        pgtype.UUID        `json:"assigned_to"`
	Title             string             `json:"title"`
	Description       pgtype.Text        `json:"description"`
	Status            string             `json:"status"`
	Priority          string             `json:"priority"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
	ClosedAt          pgtype.Timestamptz `json:"closed_at"`
	CustomerFirstName string             `json:"customer_first_name"`
	CustomerLastName  string             `json:"customer_last_name"`
	AssignedUsername  pgtype.Text        `json:"assigned_username"`
}

func (q *Queries) ListTicketsByUserId(ctx context.Context, arg ListTicketsByUserIdParams) ([]ListTicketsByUserIdRow, error) {
	rows, err := q.db.Query(ctx, listTicketsByUserId, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTicketsByUserIdRow{}
	for rows.Next() {
		var i ListTicketsByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.CustomerID,
			&i.AssignedTo,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClosedAt,
			&i.CustomerFirstName,
			&i.CustomerLastName,
			&i.AssignedUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTicket = `-- name: UpdateTicket :one
UPDATE ticket.tickets
SET
    assigned_to = COALESCE($2, assigned_to),
    title = COALESCE($3, title),
    description = COALESCE($4, description),
    status = COALESCE($5, status),
    priority = COALESCE($6, priority),
    updated_at = timezone('UTC', now()),
    closed_at = CASE WHEN $5 = 'RESOLVED' OR $5 = 'CLOSED' THEN timezone('UTC', now()) ELSE closed_at END
WHERE id = $1 
RETURNING id, tenant_id, customer_id, assigned_to, title, description, status, priority, created_at, updated_at, closed_at
`

type UpdateTicketParams struct {
	ID          pgtype.UUID `json:"id"`
	AssignedTo  pgtype.UUID `json:"assigned_to"`
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	Status      string      `json:"status"`
	Priority    string      `json:"priority"`
}

func (q *Queries) UpdateTicket(ctx context.Context, arg UpdateTicketParams) (TicketTicket, error) {
	row := q.db.QueryRow(ctx, updateTicket,
		arg.ID,
		arg.AssignedTo,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.Priority,
	)
	var i TicketTicket
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.CustomerID,
		&i.AssignedTo,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}
