// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: invoices.sql

package repositories

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoice.invoices (
    ticket_id,
    amount,
    currency,
    status,
    due_date
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, ticket_id, amount, currency, status, due_date, created_at, updated_at
`

type CreateInvoiceParams struct {
	TicketID pgtype.UUID              `json:"ticket_id"`
	Amount   pgtype.Numeric           `json:"amount"`
	Currency string                   `json:"currency"`
	Status   NullInvoiceInvoiceStatus `json:"status"`
	DueDate  pgtype.Date              `json:"due_date"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (InvoiceInvoice, error) {
	row := q.db.QueryRow(ctx, createInvoice,
		arg.TicketID,
		arg.Amount,
		arg.Currency,
		arg.Status,
		arg.DueDate,
	)
	var i InvoiceInvoice
	err := row.Scan(
		&i.ID,
		&i.TicketID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPayment = `-- name: CreatePayment :one
INSERT INTO invoice.payments (
    invoice_id,
    amount,
    payment_date,
    method,
    status
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, invoice_id, amount, payment_date, method, status, created_at, updated_at
`

type CreatePaymentParams struct {
	InvoiceID   pgtype.UUID              `json:"invoice_id"`
	Amount      pgtype.Numeric           `json:"amount"`
	PaymentDate pgtype.Timestamptz       `json:"payment_date"`
	Method      NullInvoicePaymentMethod `json:"method"`
	Status      NullInvoicePaymentStatus `json:"status"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (InvoicePayment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.InvoiceID,
		arg.Amount,
		arg.PaymentDate,
		arg.Method,
		arg.Status,
	)
	var i InvoicePayment
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.Amount,
		&i.PaymentDate,
		&i.Method,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteInvoice = `-- name: DeleteInvoice :exec
DELETE FROM invoice.invoices
WHERE id = $1
`

func (q *Queries) DeleteInvoice(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteInvoice, id)
	return err
}

const getInvoiceByID = `-- name: GetInvoiceByID :one
SELECT id, ticket_id, amount, currency, status, due_date, created_at, updated_at FROM invoice.invoices
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetInvoiceByID(ctx context.Context, id pgtype.UUID) (InvoiceInvoice, error) {
	row := q.db.QueryRow(ctx, getInvoiceByID, id)
	var i InvoiceInvoice
	err := row.Scan(
		&i.ID,
		&i.TicketID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentByID = `-- name: GetPaymentByID :one
SELECT id, invoice_id, amount, payment_date, method, status, created_at, updated_at FROM invoice.payments
WHERE id = $1
`

func (q *Queries) GetPaymentByID(ctx context.Context, id pgtype.UUID) (InvoicePayment, error) {
	row := q.db.QueryRow(ctx, getPaymentByID, id)
	var i InvoicePayment
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.Amount,
		&i.PaymentDate,
		&i.Method,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllInvoices = `-- name: ListAllInvoices :many
SELECT id, ticket_id, amount, currency, status, due_date, created_at, updated_at
FROM invoice.invoices 
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListAllInvoicesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAllInvoices(ctx context.Context, arg ListAllInvoicesParams) ([]InvoiceInvoice, error) {
	rows, err := q.db.Query(ctx, listAllInvoices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InvoiceInvoice{}
	for rows.Next() {
		var i InvoiceInvoice
		if err := rows.Scan(
			&i.ID,
			&i.TicketID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllPayments = `-- name: ListAllPayments :many
SELECT id, invoice_id, amount, payment_date, method, status, created_at, updated_at FROM invoice.payments
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListAllPaymentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAllPayments(ctx context.Context, arg ListAllPaymentsParams) ([]InvoicePayment, error) {
	rows, err := q.db.Query(ctx, listAllPayments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InvoicePayment{}
	for rows.Next() {
		var i InvoicePayment
		if err := rows.Scan(
			&i.ID,
			&i.InvoiceID,
			&i.Amount,
			&i.PaymentDate,
			&i.Method,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInvoicesByTenantID = `-- name: ListInvoicesByTenantID :many
SELECT 
    i.id, i.ticket_id, i.amount, i.currency, i.status, i.due_date,
    i.created_at, i.updated_at,
    t.title
FROM invoice.invoices AS i
JOIN ticket.tickets AS t ON i.ticket_id = t.id
WHERE t.tenant_id = $1
  AND i.deleted_at IS NULL
ORDER BY i.created_at DESC
OFFSET $2
LIMIT $3
`

type ListInvoicesByTenantIDParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	Offset   int32       `json:"offset"`
	Limit    int32       `json:"limit"`
}

type ListInvoicesByTenantIDRow struct {
	ID        pgtype.UUID              `json:"id"`
	TicketID  pgtype.UUID              `json:"ticket_id"`
	Amount    pgtype.Numeric           `json:"amount"`
	Currency  string                   `json:"currency"`
	Status    NullInvoiceInvoiceStatus `json:"status"`
	DueDate   pgtype.Date              `json:"due_date"`
	CreatedAt pgtype.Timestamptz       `json:"created_at"`
	UpdatedAt pgtype.Timestamptz       `json:"updated_at"`
	Title     string                   `json:"title"`
}

func (q *Queries) ListInvoicesByTenantID(ctx context.Context, arg ListInvoicesByTenantIDParams) ([]ListInvoicesByTenantIDRow, error) {
	rows, err := q.db.Query(ctx, listInvoicesByTenantID, arg.TenantID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListInvoicesByTenantIDRow{}
	for rows.Next() {
		var i ListInvoicesByTenantIDRow
		if err := rows.Scan(
			&i.ID,
			&i.TicketID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentsByInvoiceID = `-- name: ListPaymentsByInvoiceID :many
SELECT id, invoice_id, amount, payment_date, method, status, created_at, updated_at FROM invoice.payments
WHERE invoice_id = $1 
ORDER BY created_at DESC
LIMIT $2 
OFFSET $3
`

type ListPaymentsByInvoiceIDParams struct {
	InvoiceID pgtype.UUID `json:"invoice_id"`
	Limit     int32       `json:"limit"`
	Offset    int32       `json:"offset"`
}

func (q *Queries) ListPaymentsByInvoiceID(ctx context.Context, arg ListPaymentsByInvoiceIDParams) ([]InvoicePayment, error) {
	rows, err := q.db.Query(ctx, listPaymentsByInvoiceID, arg.InvoiceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InvoicePayment{}
	for rows.Next() {
		var i InvoicePayment
		if err := rows.Scan(
			&i.ID,
			&i.InvoiceID,
			&i.Amount,
			&i.PaymentDate,
			&i.Method,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreInvoice = `-- name: RestoreInvoice :one
UPDATE invoice.invoices
SET deleted_at = NULL
WHERE id = $1
RETURNING id, ticket_id, amount, currency, status, due_date, created_at, updated_at
`

func (q *Queries) RestoreInvoice(ctx context.Context, id pgtype.UUID) (InvoiceInvoice, error) {
	row := q.db.QueryRow(ctx, restoreInvoice, id)
	var i InvoiceInvoice
	err := row.Scan(
		&i.ID,
		&i.TicketID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const softDeleteInvoice = `-- name: SoftDeleteInvoice :exec
UPDATE invoice.invoices
SET deleted_at = timezone('UTC', now())
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteInvoice(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteInvoice, id)
	return err
}

const updateInvoice = `-- name: UpdateInvoice :one
UPDATE invoice.invoices
SET
    ticket_id = COALESCE($2, ticket_id),
    amount = COALESCE($3, amount),
    currency = COALESCE($4, currency),
    due_date = COALESCE($5, due_date),
    status = COALESCE($6, status),
    updated_at = timezone('UTC', now())
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, ticket_id, amount, currency, status, due_date, created_at, updated_at
`

type UpdateInvoiceParams struct {
	ID       pgtype.UUID              `json:"id"`
	TicketID pgtype.UUID              `json:"ticket_id"`
	Amount   pgtype.Numeric           `json:"amount"`
	Currency string                   `json:"currency"`
	DueDate  pgtype.Date              `json:"due_date"`
	Status   NullInvoiceInvoiceStatus `json:"status"`
}

func (q *Queries) UpdateInvoice(ctx context.Context, arg UpdateInvoiceParams) (InvoiceInvoice, error) {
	row := q.db.QueryRow(ctx, updateInvoice,
		arg.ID,
		arg.TicketID,
		arg.Amount,
		arg.Currency,
		arg.DueDate,
		arg.Status,
	)
	var i InvoiceInvoice
	err := row.Scan(
		&i.ID,
		&i.TicketID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
