services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: task
      POSTGRES_USER: task
      POSTGRES_PASSWORD: task
    ports:
      - "5435:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U task -d task"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network
  radis:
    image: redis:alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_DATABASE=task
      - DB_USERNAME=task
      - DB_PASSWORD=task
      - DB_SSLMODE=disable
      - DB_URL=postgres://task:task@db:5432/task?sslmode=disable
      - JWT_SECRET=jwt_secret
      - XOR_KEY=xor_key
      - LOG_LEVEL=info
      - CORS_ALLOWED_ORIGINS=http://localhost:3000
      - PORT=8080
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/tasks",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8080
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
